{"version":3,"sources":["components/middle-content/middle-content-component.jsx","components/title-content/title-content-component.jsx","components/sign-up-component/SignupComponent.jsx","components/firebase/firebase-utils.jsx","App.js","serviceWorker.js","index.js"],"names":["MiddleContentComponent","props","name","TitleComponent","className","SignupPage","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","auth","firestore","provider","GoogleAuthProvider","setCustomParameters","prompt","Footer","HomePage","Container","Row","Col","type","Button","color","onClick","SignupComponent","App","handleSubmit","event","a","preventDefault","userRef","database","ref","users","state","address","email","push","alert","handleChange","bind","e","this","setState","target","value","exact","path","component","onSubmit","class","placeholder","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.239d230c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n/*\r\nfunction middleContentComponent(){\r\n    return(\r\n    <div className = \"middleContentComponent\">\r\n        <h1>Middle Pannel </h1>      \r\n    </div>\r\n    );\r\n}*/\r\nfunction MiddleContentComponent(props) {\r\n    return(\r\n     <div>\r\n     <h1>Welcome, {props.name}</h1>\r\n     </div>\r\n    )\r\n  }\r\n\r\nexport default MiddleContentComponent;","import React from 'react';\r\nimport '../../style/titlestyle.css';\r\n\r\nconst TitleComponent = () => (\r\n    \r\n        <div className = \"titleComponent\">\r\n            <h2>React Application</h2>\r\n        </div>\r\n    \r\n)\r\n\r\nexport default TitleComponent;\r\n","import React from 'react';\r\n\r\nconst SignupPage = () => (\r\n    <div>\r\n        FirstName:\r\n    </div>\r\n)\r\n\r\nexport default SignupPage;","\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\nimport firebase from 'firebase/app';\r\n\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyAFmWYx6b400K7SsiA6ikANNtNtRSRyFbA\",\r\n    authDomain: \"bhavin-project-71590.firebaseapp.com\",\r\n    databaseURL: \"https://bhavin-project-71590.firebaseio.com\",\r\n    projectId: \"bhavin-project-71590\",\r\n    storageBucket: \"bhavin-project-71590.appspot.com\",\r\n    messagingSenderId: \"1063616084552\",\r\n    appId: \"1:1063616084552:web:d16f278f5bdabbadac367d\"\r\n  };\r\n\r\n  firebase.initializeApp(config);\r\n\r\n  export const auth = firebase.auth();\r\n  export const firestore = firebase.firestore();\r\n\r\n  const provider = new firebase.auth.GoogleAuthProvider();\r\n  provider.setCustomParameters({prompt: 'select_account'});\r\n\r\n  export const singInWithGoogle = () => auth.signInWithPopup(provider);\r\n\r\n  export default firebase;","import React , {Component} from 'react';\nimport {Route,Switch} from 'react-router-dom';\n\nimport './App.css';\nimport MiddleContentComponent from './components/middle-content/middle-content-component';\nimport TitleContentComponent from './components/title-content/title-content-component';\nimport SignupComponent from './components/sign-up-component/SignupComponent';\n\n//import signInWithGoogle from './components/firebase/firebase-utils';\n\nimport {Button} from 'reactstrap';\n\nimport { Container, Row, Col } from 'reactstrap';\n//import { auth } from 'firebase';\nimport firebase from './components/firebase/firebase-utils';\n\n\nconst Footer = ()=>(\n  <div>   \n    <h1>Footer</h1>\n  </div>\n);\n\nconst HomePage = ()=>(\n  <div>\n    \n  <TitleContentComponent/>\n  <MiddleContentComponent name = \"Bhavin\"/>    \n  \n  <form>\n  <Container>\n    <Row>\n      <Col>SERVER 1</Col>    \n      <Col>SERVER 2</Col>\n    </Row>\n    <Row>  \n      <Col>\n      <div>\n          Input 1 : <input type='text'/>\n      </div>    \n      </Col>\n      <Col>\n      <div>\n          Input 2 : <input type='text'/>\n      </div>    \n      </Col>\n    </Row>\n    <Row>\n      <Col><Button color='danger' onClick = {SignupComponent}>Check</Button></Col>\n    </Row>\n  </Container>\n  </form>\n\n  </div>\n)\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = { \n      name :'',\n      address :'',\n      email :''\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(e){\n    this.setState({\n      [e.target.name] : e.target.value\n    });\n  }\n  handleSubmit = async event =>{\n    event.preventDefault();\n    const userRef = firebase.database().ref('users');\n    const users = {\n    name: this.state.name,\n    address: this.state.address,\n    email:this.state.email\n  }\n  userRef.push(users);\n    this.state = { \n      name :'',\n      address :'',\n      email :''\n    };\n    alert('Saved !');\n  }\n  render(){\n  return (\n   <div>  \n      <Switch>\n        <Route exact path='/' component = {HomePage}/>        \n        <Route path='/f' component = {Footer}/>\n      </Switch>\n      \n      <hr/><h1>User Registration Form</h1><hr/>\n      <form onSubmit ={this.handleSubmit}>\n  <div>\n  <div className = \"form-group\"><span class=\"badge badge-secondary\"> Name :</span> <input type=\"text\" name=\"name\" placeholder = \"Enter Name\" onChange={this.handleChange} className = \"form-control\"/></div>\n  <div className = \"form-group\"><span class=\"badge badge-secondary\"> Address :</span> <input type=\"text\" name=\"address\" placeholder=\"Enter Address\"  onChange={this.handleChange} className = \"form-control\"/></div>\n  <div className = \"form-group\"><span class=\"badge badge-secondary\"> Email :</span> <input type=\"text\" name=\"email\" placeholder=\"Enter Email\"  onChange={this.handleChange} className = \"form-control\"/></div>\n  <div className = \"mx-auto text-center\"><input type=\"submit\" className =\"btn btn-success\"/></div>\n  </div>\n  </form>\n  \n  \n   </div>\n   \n  )\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n    <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}